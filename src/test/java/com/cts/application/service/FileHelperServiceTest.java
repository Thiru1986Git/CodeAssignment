/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 14 22:37:59 GMT 2018
 */

package com.cts.application.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cts.application.service.FileHelperService;
import com.cts.application.service.FileProcessorService;
import com.cts.application.service.RecordHelperService;
import com.cts.application.service.XMLService;
import java.io.File;
import java.nio.file.InvalidPathException;
import java.nio.file.NoSuchFileException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileHelperServiceTest extends FileHelperServiceTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target\\test-classes");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "X/XaWK;cmL}e");
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      File file0 = fileHelperService0.getResource("");
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target\\test-classes");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      File file0 = fileHelperService0.getResource("");
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      File file0 = fileHelperService0.getResource("");
      assertEquals("test-classes", file0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      MockFile mockFile0 = new MockFile("");
      String string0 = fileHelperService0.getFullFileName(mockFile0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      String string0 = fileHelperService0.getFileExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      String string0 = fileHelperService0.getFileExtension("Dp.~!_,}nR\";bt?Uf");
      assertEquals("~!_,}nR\";bt?Uf", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      String string0 = fileHelperService0.getFileBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      String string0 = fileHelperService0.getFileBaseName("CUSTOMER_STATMENT Total records processed: ");
      assertEquals("CUSTOMER_STATMENT Total records processed: ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\470679\\AppData\\Local\\Temp\\I5]@i 16_1392409281320.r818vU$&");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ",(B=x]-=a<~s}1C'[7f");
      File file0 = fileHelperService0.createFailedReportFile("I5]@i 16", "r818vU$&");
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      File file0 = fileHelperService0.createFailedReportFile(".", "org.apache.commons.io.filefilter.TrueFileFilter");
      String string0 = fileHelperService0.getFullFileName(file0);
      assertEquals("._1392409281320.org.apache.commons.io.filefilter.TrueFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\470679\\AppData\\Local\\Temp\\I5]@i 16_1392409281320.r818vU$&");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = fileHelperService0.createFailedReportFile("I5]@i 16", "r818vU$&");
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MockFile mockFile0 = new MockFile("@J_L", "~<n|pZ");
      linkedList0.add((File) mockFile0);
      // Undeclared exception!
      try { 
        fileHelperService0.processFiles(linkedList0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      // Undeclared exception!
      try { 
        fileHelperService0.processFiles((List<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cts.application.service.FileHelperService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      try { 
        fileHelperService0.collectFiles("The wildcard must not be null");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      // Undeclared exception!
      try { 
        fileHelperService0.collectFiles("o_7B[\"!T-7Dh,0u");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      // Undeclared exception!
      try { 
        fileHelperService0.collectFiles((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      ClassLoader classLoader0 = fileHelperService0.getClassLoader();
      assertNotNull(classLoader0);
  }

  //@Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      List<File> list0 = fileHelperService0.collectFiles("");
      // Undeclared exception!
      try { 
        fileHelperService0.processFiles(list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      LinkedList<File> linkedList0 = new LinkedList<File>();
      int int0 = fileHelperService0.processFiles(linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      MockFile mockFile0 = new MockFile("", "");
      String string0 = fileHelperService0.getResourceType(mockFile0);
      assertNotNull(string0);
      assertEquals("directory", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      File file0 = MockFile.createTempFile("/8U", "/8U", (File) null);
      String string0 = fileHelperService0.getResourceType(file0);
      assertNotNull(string0);
      assertEquals("file", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      String string0 = fileHelperService0.getResourceType((File) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      // Undeclared exception!
      try { 
        fileHelperService0.getFullFileName((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cts.application.service.FileHelperService", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      String string0 = fileHelperService0.getFileExtension("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      // Undeclared exception!
      try { 
        fileHelperService0.getResource("directory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = mock(FileProcessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      String string0 = fileHelperService0.getFileBaseName("");
      assertEquals("", string0);
  }
}
