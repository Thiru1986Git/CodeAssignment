/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Jul 28 14:48:59 GMT 2018
 */

package com.cts.application.service;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class FileHelperService_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.cts.application.service.FileHelperService"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\470679\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "D:\\Thiru\\Important\\Cognizant\\RaboBank\\WIP\\CodeAssignment"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\470679"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "470679"); 
    java.lang.System.setProperty("user.timezone", "Asia/Calcutta"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(FileHelperService_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.core.io.DescriptiveResource",
      "org.springframework.oxm.jaxb.Jaxb2Marshaller",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.core.io.ByteArrayResource",
      "org.springframework.core.io.WritableResource",
      "org.springframework.oxm.Marshaller",
      "org.springframework.oxm.jaxb.Jaxb2Marshaller$Jaxb2AttachmentMarshaller",
      "org.springframework.core.type.classreading.MetadataReader",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment$1",
      "org.springframework.util.AntPathMatcher",
      "org.springframework.core.NestedExceptionUtils",
      "org.springframework.util.ConcurrentReferenceHashMap$WeakEntryReference",
      "org.springframework.core.io.Resource",
      "org.springframework.core.type.filter.AnnotationTypeFilter",
      "org.springframework.util.ClassUtils",
      "org.springframework.core.annotation.AnnotationConfigurationException",
      "org.springframework.oxm.jaxb.Jaxb2Marshaller$Jaxb2AttachmentUnmarshaller",
      "org.springframework.core.annotation.AnnotationUtils",
      "org.springframework.core.type.AnnotationMetadata",
      "org.springframework.core.type.classreading.CachingMetadataReaderFactory",
      "org.springframework.util.xml.StaxUtils",
      "org.springframework.oxm.GenericMarshaller",
      "org.springframework.util.CollectionUtils",
      "org.springframework.core.io.InputStreamSource",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.util.ConcurrentReferenceHashMap$EntrySet",
      "org.springframework.util.ConcurrentReferenceHashMap$Entry",
      "org.springframework.util.ConcurrentReferenceHashMap$TaskOption",
      "org.springframework.oxm.Unmarshaller",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.oxm.GenericUnmarshaller",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "com.cts.application.model.xml.Records",
      "org.springframework.stereotype.Service",
      "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
      "org.springframework.oxm.UncategorizedMappingException",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$2",
      "org.springframework.util.ConcurrentReferenceHashMap$3",
      "org.springframework.util.ConcurrentReferenceHashMap$4",
      "org.springframework.core.type.classreading.CachingMetadataReaderFactory$1",
      "com.cts.application.model.xml.Record",
      "org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner",
      "org.springframework.util.PathMatcher",
      "org.springframework.util.ObjectUtils",
      "org.springframework.context.ResourceLoaderAware",
      "org.springframework.util.MultiValueMap",
      "org.springframework.util.ConcurrentReferenceHashMap$Entries",
      "org.springframework.core.annotation.AnnotationUtils$DefaultValueHolder",
      "org.springframework.core.io.PathResource",
      "org.springframework.util.ResourceUtils",
      "org.springframework.oxm.mime.MimeContainer",
      "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
      "org.springframework.core.annotation.AnnotationAttributes",
      "org.springframework.util.ConcurrentReferenceHashMap$5",
      "org.springframework.util.AntPathMatcher$PathSeparatorPatternCache",
      "org.springframework.oxm.mime.MimeUnmarshaller",
      "org.springframework.oxm.ValidationFailureException",
      "org.springframework.util.ConcurrentReferenceHashMap$Reference",
      "org.springframework.core.type.filter.TypeFilter",
      "org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.core.type.ClassMetadata",
      "com.cts.application.service.FileProcessorService",
      "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
      "org.springframework.core.io.ContextResource",
      "com.cts.application.service.FileHelperService",
      "org.springframework.core.io.InputStreamResource",
      "org.springframework.oxm.UnmarshallingFailureException",
      "com.cts.application.service.RecordHelperService",
      "org.springframework.util.AntPathMatcher$AntPathStringMatcher",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.oxm.MarshallingFailureException",
      "org.springframework.core.io.ResourceLoader",
      "org.springframework.core.io.ClassRelativeResourceLoader",
      "org.springframework.core.io.FileSystemResource",
      "org.springframework.util.ConcurrentReferenceHashMap$EntryIterator",
      "org.springframework.oxm.XmlMappingException",
      "org.springframework.oxm.mime.MimeMarshaller",
      "org.springframework.core.annotation.AnnotationAttributeExtractor",
      "org.springframework.core.io.ProtocolResolver",
      "org.springframework.core.io.ClassRelativeResourceLoader$ClassRelativeContextResource",
      "org.springframework.beans.factory.BeanClassLoaderAware",
      "org.springframework.util.ConcurrentReferenceHashMap$Restructure",
      "org.apache.commons.io.FilenameUtils",
      "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference",
      "org.apache.commons.io.IOCase",
      "org.springframework.core.io.UrlResource",
      "org.springframework.core.io.ClassPathResource",
      "org.springframework.beans.factory.Aware",
      "org.springframework.core.io.FileSystemResourceLoader",
      "org.springframework.beans.factory.InitializingBean",
      "org.springframework.core.annotation.AnnotationUtils$AnnotationCacheKey",
      "org.springframework.core.io.AbstractFileResolvingResource",
      "org.springframework.core.io.DefaultResourceLoader",
      "org.springframework.core.annotation.AnnotationUtils$AliasDescriptor",
      "org.springframework.core.io.VfsResource",
      "org.springframework.oxm.MarshallingException",
      "org.springframework.core.annotation.AliasFor",
      "org.springframework.core.io.VfsUtils",
      "org.springframework.core.annotation.AnnotationUtils$AnnotationCollector",
      "org.springframework.core.NestedIOException",
      "org.springframework.core.io.AbstractResource",
      "org.springframework.stereotype.Component",
      "org.springframework.core.type.classreading.MetadataReaderFactory",
      "org.springframework.core.io.support.ResourcePatternResolver",
      "org.springframework.core.type.AnnotatedTypeMetadata",
      "org.springframework.util.Assert",
      "org.springframework.util.StringUtils"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.cts.application.service.FileProcessorService", false, FileHelperService_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(FileHelperService_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.cts.application.service.FileHelperService",
      "org.apache.commons.io.FilenameUtils",
      "com.cts.application.service.FileProcessorService",
      "org.springframework.oxm.jaxb.Jaxb2Marshaller",
      "com.cts.application.service.RecordHelperService",
      "com.cts.application.model.xml.Records",
      "org.springframework.util.StringUtils",
      "org.springframework.util.ObjectUtils",
      "org.springframework.core.io.AbstractResource",
      "org.springframework.core.io.AbstractFileResolvingResource",
      "org.springframework.core.io.UrlResource",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.Assert",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.core.annotation.AnnotationUtils",
      "org.springframework.core.annotation.AnnotationUtils$AnnotationCacheKey",
      "org.springframework.util.ConcurrentReferenceHashMap$Restructure",
      "org.springframework.core.io.ByteArrayResource",
      "org.springframework.core.io.DefaultResourceLoader",
      "org.springframework.core.io.ClassRelativeResourceLoader",
      "org.springframework.util.ClassUtils",
      "org.springframework.core.io.ClassPathResource",
      "org.springframework.util.CollectionUtils",
      "org.springframework.core.io.VfsResource",
      "org.springframework.core.io.VfsUtils",
      "org.springframework.core.io.PathResource",
      "org.springframework.util.ResourceUtils",
      "org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner",
      "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
      "org.springframework.core.type.filter.AnnotationTypeFilter",
      "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
      "org.springframework.util.AntPathMatcher",
      "org.springframework.util.AntPathMatcher$PathSeparatorPatternCache",
      "org.springframework.core.type.classreading.SimpleMetadataReaderFactory",
      "org.springframework.core.type.classreading.CachingMetadataReaderFactory",
      "org.springframework.core.type.classreading.CachingMetadataReaderFactory$1",
      "org.springframework.util.xml.StaxUtils",
      "org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource",
      "org.springframework.core.io.FileSystemResource",
      "org.springframework.core.io.InputStreamResource",
      "org.springframework.core.io.DescriptiveResource",
      "org.springframework.core.io.FileSystemResourceLoader",
      "org.springframework.core.io.ClassRelativeResourceLoader$ClassRelativeContextResource"
    );
  }
}
