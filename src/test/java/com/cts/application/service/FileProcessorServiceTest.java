/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 14 22:36:07 GMT 2018
 */

package com.cts.application.service;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.xml.bind.UnmarshalException;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileProcessorServiceTest extends FileProcessorServiceTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("z]0'a A3IJ)`M:zq(v\\z]0'a A3IJ)`M:zq(v");
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#crv5r !V*Y,}cE7,");
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#crv5r !V*Y,}cE7,");
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#crv5r !V*Y,}cE7,");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "#crv5r !V*Y,}cE7,");
      MockFile mockFile0 = new MockFile("z]0'a A3IJ)`M:zq(v", "z]0'a A3IJ)`M:zq(v");
      fileProcessorService0.processCSVFile(mockFile0);
      assertEquals(74L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      MockFile mockFile0 = new MockFile("z]0'a A3IJ)`M:zq(v", "z]0'a A3IJ)`M:zq(v");
      try { 
        fileProcessorService0.processXMLFile(mockFile0);
        fail("Expecting exception: UnmarshalException");
      
      } catch(UnmarshalException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = mock(FileHelperService.class, new ViolatedAssumptionAnswer());
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      MockFile mockFile0 = new MockFile("\"|@kYawi", "\"|@kYawi");
      // Undeclared exception!
      try { 
        fileProcessorService0.processXMLFile(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cts.application.service.FileProcessorService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      // Undeclared exception!
      try { 
        fileProcessorService0.processXMLFile((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file parameter must not be null
         //
         verifyException("javax.xml.bind.helpers.AbstractUnmarshallerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      // Undeclared exception!
      try { 
        fileProcessorService0.processCSVFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      File file0 = MockFile.createTempFile("q{4s[", "=,_fM/&icP]eZx_Tf");
      // Undeclared exception!
      try { 
        fileProcessorService0.processCSVFile(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cts.application.service.FileProcessorService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      MockFile mockFile0 = new MockFile("N9EXKoci-fq^uFH");
      try { 
        fileProcessorService0.processCSVFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("z]0'a A3IJ)`M:zq(v\\z]0'a A3IJ)`M:zq(v");
      byte[] byteArray0 = new byte[17];
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#crv5r !V*Y,}cE7,");
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#crv5r !V*Y,}cE7,");
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "#crv5r !V*Y,}cE7,");
      MockFile mockFile0 = new MockFile("z]0'a A3IJ)`M:zq(v", "z]0'a A3IJ)`M:zq(v");
      // Undeclared exception!
      try { 
        fileProcessorService0.processCSVFile(mockFile0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000#crv5r !V*Y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("z]0'a A3IJ)`M:zq(v\\z]0'a A3IJ)`M:zq(v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "{z|[KL");
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      MockFile mockFile0 = new MockFile("z]0'a A3IJ)`M:zq(v", "z]0'a A3IJ)`M:zq(v");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "z]0'a A3IJ)`M:zq(v");
      fileProcessorService0.processCSVFile(mockFile0);
      assertEquals("C:\\Users\\470679\\Desktop\\Code\\github\\CodeAssignment\\z]0'a A3IJ)`M:zq(v\\z]0'a A3IJ)`M:zq(v", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\470679\\AppData\\Local\\Temp\\z]0'a A3IJ)`M:zq(v_1392409281320.");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("z]0'a A3IJ)`M:zq(v\\z]0'a A3IJ)`M:zq(v");
      byte[] byteArray0 = new byte[13];
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ",2");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ",2");
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ",2");
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ",2");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ",2");
      MockFile mockFile0 = new MockFile("z]0'a A3IJ)`M:zq(v", "z]0'a A3IJ)`M:zq(v");
      try { 
        fileProcessorService0.processCSVFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      XMLService xMLService0 = new XMLService();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("z]0'a A3IJ)`M:zq(v\\z]0'a A3IJ)`M:zq(v");
      byte[] byteArray0 = new byte[14];
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ",3");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ",3");
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "xmlService", (Object) xMLService0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ",3");
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ",3");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",3");
      MockFile mockFile0 = new MockFile("z]0'a A3IJ)`M:zq(v", "z]0'a A3IJ)`M:zq(v");
      fileProcessorService0.processCSVFile(mockFile0);
      assertTrue(mockFile0.isAbsolute());
  }
}
