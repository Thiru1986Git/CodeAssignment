/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 28 14:51:57 GMT 2018
 */

package com.cts.application.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cts.application.model.xml.Record;
import com.cts.application.model.xml.Records;
import com.cts.application.service.FileHelperService;
import com.cts.application.service.FileProcessorService;
import com.cts.application.service.RecordHelperService;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.oxm.jaxb.Jaxb2Marshaller;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileProcessorService_ESTest extends FileProcessorService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      MockFile mockFile0 = new MockFile("com.cts.application.service.FileProcessorService");
      try { 
        fileProcessorService0.processXMLFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      // Undeclared exception!
      try { 
        fileProcessorService0.processCSVFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      File file0 = fileHelperService0.createFailedReportFile(" ", "W$il");
      try { 
        fileProcessorService0.processCSVFile(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Records records0 = new Records();
      LinkedList<Record> linkedList0 = new LinkedList<Record>();
      Record record0 = new Record();
      BigDecimal bigDecimal0 = new BigDecimal((-810));
      record0.setMutation(bigDecimal0);
      record0.setEndBalance(bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      record0.setStartBalance(bigDecimal1);
      linkedList0.add(record0);
      records0.setRecords(linkedList0);
      List<Record> list0 = fileProcessorService0.processXMLRecords(records0);
      assertFalse(list0.contains(record0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Records records0 = new Records();
      LinkedList<Record> linkedList0 = new LinkedList<Record>();
      Record record0 = new Record();
      BigDecimal bigDecimal0 = new BigDecimal((-1201));
      record0.setMutation(bigDecimal0);
      record0.setEndBalance(bigDecimal0);
      record0.setStartBalance(bigDecimal0);
      linkedList0.add(record0);
      records0.setRecords(linkedList0);
      List<Record> list0 = fileProcessorService0.processXMLRecords(records0);
      assertTrue(list0.contains(record0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Records records0 = new Records();
      LinkedList<Record> linkedList0 = new LinkedList<Record>();
      Record record0 = new Record();
      BigDecimal bigDecimal0 = new BigDecimal((-1201));
      record0.setMutation(bigDecimal0);
      record0.setStartBalance(bigDecimal0);
      linkedList0.add(record0);
      records0.setRecords(linkedList0);
      List<Record> list0 = fileProcessorService0.processXMLRecords(records0);
      assertFalse(list0.contains(record0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Records records0 = new Records();
      LinkedList<Record> linkedList0 = new LinkedList<Record>();
      Record record0 = new Record();
      BigDecimal bigDecimal0 = new BigDecimal((double) 1760);
      record0.setStartBalance(bigDecimal0);
      linkedList0.add(record0);
      records0.setRecords(linkedList0);
      List<Record> list0 = fileProcessorService0.processXMLRecords(records0);
      assertFalse(list0.contains(record0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Records records0 = new Records();
      LinkedList<Record> linkedList0 = new LinkedList<Record>();
      Record record0 = new Record();
      Integer integer0 = new Integer(1760);
      record0.setReference(integer0);
      linkedList0.add(record0);
      linkedList0.add(record0);
      records0.setRecords(linkedList0);
      List<Record> list0 = fileProcessorService0.processXMLRecords(records0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Records records0 = new Records();
      LinkedList<Record> linkedList0 = new LinkedList<Record>();
      linkedList0.add((Record) null);
      records0.setRecords(linkedList0);
      List<Record> list0 = fileProcessorService0.processXMLRecords(records0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileHelperService fileHelperService0 = new FileHelperService();
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Records records0 = new Records();
      fileProcessorService0.processXMLRecords(records0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileProcessorService fileProcessorService0 = new FileProcessorService();
      FileHelperService fileHelperService0 = new FileHelperService();
      Jaxb2Marshaller jaxb2Marshaller0 = new Jaxb2Marshaller();
      RecordHelperService recordHelperService0 = new RecordHelperService();
      Injector.inject(fileHelperService0, (Class<?>) FileHelperService.class, "fileProcessorService", (Object) fileProcessorService0);
      Injector.validateBean(fileHelperService0, (Class<?>) FileHelperService.class);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "fileHelperService", (Object) fileHelperService0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "jaxb2Marshaller", (Object) jaxb2Marshaller0);
      Injector.inject(fileProcessorService0, (Class<?>) FileProcessorService.class, "recordHelperService", (Object) recordHelperService0);
      Injector.validateBean(fileProcessorService0, (Class<?>) FileProcessorService.class);
      List<Record> list0 = fileProcessorService0.processXMLRecords((Records) null);
      assertEquals(0, list0.size());
  }
}
